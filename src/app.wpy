<style lang="less">
@import 'weui.wxss';

page{
    background-color: #F8F8F8;
    font-size: 10px;
    font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;
}
.page__hd {
    padding: 15px;
}
.page__bd {
    padding-bottom: 20px;
}
.page__bd_spacing {
    padding-left: 15px;
    padding-right: 15px;
}

.page__ft{
    padding-bottom: 10px;
    text-align: center;
}

.page__title {
    text-align: left;
    font-size: 20px;
    font-weight: 400;
}

.page__desc {
    margin-top: 5px;
    color: #888888;
    text-align: left;
    font-size: 14px;
}

.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>


<script>
import wepy from 'wepy'
import 'wepy-async-function'
import config from './config'

import Raven from './raven.min'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/list',
      'pages/add',
      'pages/show'
      // 'pages/index'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black',
      enablePullDownRefresh: true
    }
  }

  globalData = {
    userInfo: null,
    config: config,
    // login: this.login
    login: async () => {
      const that = this
      return new Promise(async function(resolve, reject) {
        try {
          resolve(await that.login())
        } catch (error) {
          reject(error)
        }
      })
    }
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
    this.intercept('request', {
      config (p) {
        p.timestamp = +new Date()
        return p
      },
      success (p) {
        console.log('request success')
        Raven.captureBreadcrumb({
          category: 'ajax',
          data: {
            method: 'get',
            url: 'weapp.showcase.page/1.0.0/get',
            status_code: 200
          }
        })
        return p
      },
      fail (p) {
        console.log('request error')
        return p
      }
    })
  }

  async checkSession () {
    console.log('checkSession ing')
    return new Promise(function(resolve, reject) {
      wx.checkSession({
        success: function() {
          // session 未过期，并且在本生命周期一直有效
          resolve('0')
        },
        fail: function() {
          // 登录态过期
          resolve('1')
        }
      })
    })
  }

  async getcode () {
    return new Promise(function(resolve, reject) {
      wx.login({
        success: function(res) {
          // console.log(res)
          if (res.code) {
            resolve(res.code)
          } else {
            console.log('获取用户登录态失败！' + res.errMsg)
            reject(res.errMsg)
          }
        }
      })
    })
  }

  async getSession(code) {
    const that = this
    return new Promise(function(resolve, reject) {
      wepy.request({
        url: that.globalData.config.apiList.user.wxlogin,
        data: {
          code: code
        }
      }).then(function (result) {
        if (result && result.data) {
          that.globalData.session = JSON.parse(result.data)
          // 保存到storage
          wx.setStorageSync('user_session', that.globalData.session)
          console.log('getSession', 0)
          resolve('0') // { code: 0, msg: 'getSession OK' }
        } else {
          console.log('getSession', 500)
          resolve('500') // { code: 500, msg: 'getSession failed.' }
        }
      })
    })
  }

  async login() {
    console.log('Raven config install')
    Raven
      .config('http://abbbfaf9167e46f88798d3e9cb6429be@139.199.9.175:9000/5')
      .install(function (err, initialErr, eventId) {
        console.log('Raven install error:', err)
      })

    console.log('login ing')
    const that = this
    try {
      // 初始化缓存
      console.log(await that.initStorage())
      const state = await that.checkSession()
      if (state === 1 || !that.globalData.session) { // 没有session'
        const code = await that.getcode()
        console.log('login getSession:', await that.getSession(code))
        console.log('login end OK 新session with code : ', code)
        // 获取用户信息
        console.log('login getUserInfo:', await that.getUserInfo())
      } else { // 有session
        // 不用处理
        console.log('login end OK 已有session', that.globalData.session, that.globalData.userInfo)
      }
      return ('login success.')
    } catch (err) {
      console.log('login error here:', err)
      return (err)
    }
  }

  async getUserInfo(cb) {
    const that = this
    try {
      await wepy.login()
      that.globalData.userInfo = (await wepy.getUserInfo()).userInfo
      wx.setStorageSync('userInfo', that.globalData.userInfo)
      return (that.globalData.userInfo)
    } catch (err) {
      console.log('getUserInfo error:', err)
      return (err)
    }
  }

  async initStorage() {
    console.log('initStorage ing')
    const that = this
    that.globalData.session = wx.getStorageSync('user_session')
    that.globalData.userInfo = wx.getStorageSync('userInfo')
    console.log('load Storage:', that.globalData.session, that.globalData.userInfo)
    return ('initStorage OK')
  }

  async onLaunch() {
    // throw new Error('test')
    console.log('Raven:', Raven)
    Raven.captureException(new Error('test test'))
  }

  onError(msg) {
    console.log('Raven.captureException')
    Raven.captureException(msg, {
      level: 'error'
    })
  }
}
</script>
